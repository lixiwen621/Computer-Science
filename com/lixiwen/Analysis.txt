TASK 0:
    Calculate Big O
    first_text = texts_list[0]
    is O(1)

    last_call = calls_list[-1]
    is O(1)

    Time - Complexity: O(1) + O(1) ≈ O(1)
    Space - complexity: O(n+m) ≈ O(n)


TASK 1:

    Calculate Big O
        for record in texts_list + calls_list:
            telephone_sets.add(record[0])
            telephone_sets.add(record[1])

    Time - Complexity: O(n) + O(n) ≈ O(n)
    Space - complexity: O(n) + O(m) ≈ O(n)



TASK 2:

    Calculate Big O
    for call_list in calls_list:
        telephone_call_duration_dict[call_list[0]] = telephone_call_duration_dict.get(call_list[0],0) + int(call_list[3])
        telephone_call_duration_dict[call_list[1]] = telephone_call_duration_dict.get(call_list[1],0) + int(call_list[3])

    is 2 * O(n)

    # dict sort
    max_call_telephone_number = max(telephone_call_duration_dict,key=telephone_call_duration_dict.get)
    is O(n)

    Time - Complexity: 2 * O(n) + O(n) ≈ O(n)
    Space - complexity:  O(n)



TASK 3:

    Calculate Big O
    bangalore_numbers_call_list = list(filter(lambda x: x[0].startswith('(080)'),calls_list))
    is  O(n)

    for call_number in bangalore_numbers_call_list:
        number = call_number[1]       is  O(n)
    if number[0] == "7" or number[0] == "8" or number[0] == "9":
        area_code_set.add(number[0:4])
    elif number[0] == "(":
        end = number.find(")")
        area_code_set.add(number[1:end])    is  O(n)
    area_code_list_sort = sorted(area_code_set)    is  O(n log n)

    is O(n) + O(n) + O(n) + O(n log n) 约等于 O(n log n)


    total_bangalore_calls = len(bangalore_numbers_call_list)
    is O(1)

    bangalore_call_bangalore_number_list = list(filter(lambda x: x[1].startswith('(080)'),bangalore_numbers_call_list))
    is O(n)

    bangalore_call_bangalore_length = len(bangalore_call_bangalore_number_list)
    is O(1)

    percent = Decimal(bangalore_call_bangalore_length)/Decimal(total_bangalore_calls) * 100
    is O(1)

    is  O(1)+ O(n) + O(1) + O(1) ≈  O(n)

    Time - Complexity: O(n) + O(n) ≈ O(n)
    Space - complexity:  O(n)



TASK 4:

    Calculate Big O
    incoming_calls_list = [x[1] for x in calls_list]
    is O(n)

    outgoing_calls_list = [x[0] for x in calls_list]
    is O(n)

    for call_list in outgoing_calls_list:
        if call_list not in incoming_calls_list:
            telephone_marketing_set.add(call_list)
    is O(n^2)

    is  O(n) + O(n) + O(n^2)  ≈ O(n^2)

    telephone_marketing_set = {
        telephone_marketing
        for telephone_marketing in telephone_marketing_set
        if not any(
            telephone_marketing == text_list[0] or telephone_marketing == text_list[1]
            for text_list in texts_list
        )
    }
    is O(n^2)

    telephone_marketing_list = sorted(telephone_marketing_set)
    is O(n log n)


    Time - Complexity: O(n^2) + O(n^2) + O(n log n)≈ O(n^2)
    Space - complexity:  O(n)



